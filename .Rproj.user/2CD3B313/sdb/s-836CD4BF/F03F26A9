{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\n# load required packages\nlibrary(shiny) # for interactivity\nlibrary(dplyr) # for data munging\nlibrary(tidyr) # for data munging\nlibrary(ggplot2) # for plotting data\nlibrary(reshape2) # for melting data\nlibrary(scales) # for something I can't remember\nlibrary(plyr) # for data munging\nlibrary(pracma) # for error function\nlibrary(readr) # for data import\nlibrary(shinyapps) # for app deployment\n\n\n\n# open shiny server\n\nshinyServer(function(input, output) {\n        \n        # reactive to upload file\n        # returns uploaded file\n        Upload <- reactive ({                 \n                # Input file, initially null\n                \n                inFile <- input$file1\n                \n                \n                if (is.null(inFile))\n                        return(NULL)\n                \n                upload <- read.table(inFile$datapath, header = TRUE) \n        })\n        \n        # reactive to upload example data\n        # and for users to select dataset\n        # returns selected dataset\n        pickData <- reactive({\n                    \n        bl3 <- read.table(\"./examples/bl3.txt\", header=TRUE)\n        bl6 <- read.table(\"./examples/bl6.txt\", header=TRUE)\n        vamas <- read.table(\"./examples/vamas.txt\", header=TRUE)\n        switch(input$dataset,\n               \"Example 1: 3% PS/PMMA bilayer\" = bl3,\n               \"Example 2: 6% PS/PMMA bilayer\" = bl6,\n               \"Example 3: VAMAS multilayer\" = vamas,\n              \"User uploaded file\" = Upload()\n        )\n         })\n        \n        \n        # reactive to meld selected data\n        GetData <- reactive({\n                \n                pickdata <- pickData()\n                sampledata <- pickdata %>%\n               # sampledata <-  read.table(\"vamas_example.txt\", header=TRUE) %>%\n                        melt(id.vars = \"time\",\n                             variable.name = \"peak\",\n                             value.name = \"intensity\")\n                return(sampledata)\n        })\n        \n        # reactive to get max time\n        # returns max time\n        # MAY NOT BE NEEDED ANY MORE\n        MaxTime <- reactive({\n                sampledata <- GetData()\n                MaxTime <- max(sampledata$time)\n                return(MaxTime)\n        })\n        \n        # reactive to list peaks avaliable to plot\n        # returns list of peaks\n        peakList <- reactive({\n                sampledata <- GetData()\n                peakList <- sampledata %>% distinct(peak) # unique(as.character(colnames(peakSelect)))\n                peakList$time <- NULL \n                peakList$intensity <- NULL\n                peakList$peak <- as.character(peakList$peak)\n                peakList <- peakList$peak\n                return(peakList)\n        })\n        \n        # reactive to subset data based on selected peak\n        # returns subset of data for selected peak\n        subData <- reactive({\n                sampledata <- GetData()\n                selectedPeak <- input$peak\n                peakdata <- if (is.null(input$peak)) \n                                (subset(sampledata, peak == \"X69\"))\n                           else(subset(sampledata, peak == input$peak))\n                return(peakdata)\n        })\n        \n        # reactive to plot points\n        # returns ggplot of points\n        output$plotpoints <- renderPlot({\n\n\n          # 'Charactistic peaks of VAMAS samples include m/z 26, 42, 43.99, 344.2, 563.4, 43, 59.02, 231.2, 277.2, 1175.8'\n          \n          #635.5\n          \n          peakdata <- subData()\n          \n          \n          #interface <- cbind(interface$time, log(interface$intensity)) %>% as.data.frame()\n          #colnames(interface) <- c(\"t\", \"logIntensity\")\n          \n          # Plot sample data\n          plotpoints <- ggplot() + \n                  geom_point(data = peakdata,\n                             aes(time,log10(intensity)), colour = \"blue\") +\n                  geom_line(data = peakdata,\n                            aes(time,log10(intensity)), colour = \"blue\") +  \n                  #    geom_point(data = subset(peakdata, peak == \"X1175.8\"),\n                  #               aes(time,log(intensity)), colour = \"green\") +\n                  #    geom_line(data = subset(peakdata, peak == \"X1175.8\"),\n                  #              aes(time,log(intensity)), colour = \"green\") + \n                  theme_classic() \n          return(plotpoints)\n  })\n  \n  \n  # reactive to subset data to brushed points\n  # and fit error function across this region\n  # returns NLS fit\n  fitData <- reactive({\n          \n          peakdata <- subData()\n          \n\n                  \n\n          brushedinterface <- brushedPoints(peakdata, input$plotpoints_brush, xvar=\"time\", yvar=\"intensity\")\n          start <- min(brushedinterface$time) #min(input$range)\n          end <- max(brushedinterface$time) #max(input$range)\n          interface <- brushedinterface %>% \n                  #subset(peak == \"X69\") %>%\n                  #subset(time<=end & time >= start) %>%\n                  select(one_of(c(\"time\", \"intensity\"))) %>%\n                  transmute(t = time, logIntensity=log10(intensity))\n          \n          \n          # Write the function\n          error.func <- function(t, B, sigma, i, A) {\n                  0.5 * (B-A) * (1 + erf( (t - i) / (sigma *sqrt(2) ) ) ) + A\n                  #erf(x)v\n          }\n          \n          \n          # Generate fitted data\n          #t <- seq(start,end, by=0.01)\n          #logIntensity <- error.func(seq(start, end, by=0.01), 13, 5, 45, 6)\n          \n          # Optimize fit\n\n          nls_fit <-nls(logIntensity ~ error.func(t, B, sigma, i, A), \n                        data = interface, \n                        start = list(B = input$B, #10, # max intensity \n                                     A = input$A, #3# baseline intensity\n                                     sigma = input$sigma, # sigma\n                                     #i = 120\n                                     i = ((end-start)/2)+start # interface position\n                        ), \n                        trace = F)\n\n          return(nls_fit)\n          # need to add and if else statement depending on if this converged!\n  })\n  \n  # reactive to prodict fitted data across brushed interface region\n  # returns data frame of 100 predicted points\n  predictData <- reactive({\n          peakdata <- subData()\n          brushedinterface <- brushedPoints(peakdata, input$plotpoints_brush, xvar=\"time\", yvar=\"intensity\")\n          nls_fit <- fitData()\n          start <- min(brushedinterface$time) #min(input$range)\n          end <- max(brushedinterface$time)\n          # predict new data points from fit\n          t <- seq(start ,end, by=10/(end-start))\n          logIntensity <- as.numeric(predict(nls_fit, list(t = t)))\n          \n          # Make a data frame\n          fit <- cbind(t,logIntensity) %>% as.data.frame()\n          colnames(fit) <- c(\"t\", \"logIntensity\")\n          return(fit)\n          \n  })\n  \n  # plots fitted data over points\n  output$plotfit <- renderPlot({ \n          peakdata  <- subData()\n          fit <- predictData()\n          plotpoints <- ggplot() + \n                  geom_point(data = peakdata,\n                             aes(time,log10(intensity)), colour = \"blue\") +\n                  geom_line(data = peakdata,\n                            aes(time,log10(intensity)), colour = \"blue\") +  \n                  #    geom_point(data = subset(peakdata, peak == \"X1175.8\"),\n                  #               aes(time,log(intensity)), colour = \"green\") +\n                  #    geom_line(data = subset(peakdata, peak == \"X1175.8\"),\n                  #              aes(time,log(intensity)), colour = \"green\") + \n                  theme_classic() \n          \n          # Overlay fit on \n          plotfit <- plotpoints + geom_line(data=fit, aes(t,logIntensity), colour=\"red\", size=2) + theme_bw() #+ scale_x_continuous(breaks=seq(0, 500, by =  25))\n          \n          return(plotfit)\n\n  })\n# summarizes NLS fit\noutput$nls_summary <- renderPrint({\n        summary( fitData() )\n})\n\n# summarizes coefficients and interface positions\n  output$fitsummary <- renderTable({\n          peakdata <- subData()\n          brushedinterface <- brushedPoints(peakdata, input$plotpoints_brush, xvar=\"time\", yvar=\"intensity\")\n          nls_fit <- fitData()\n          start <- min(brushedinterface$time) #min(input$range)\n          end <- max(brushedinterface$time)\n          coef <- coef(nls_fit) %>% t() %>% as.data.frame() %>%\n                  mutate(fwhm = 2*sqrt(2*log(2))*sigma, #2.3548 * z,\n                         \"16%-84%\" = 2 * sigma ,\n                         fwtm = 2*sqrt(2*log(10))*sigma) %>%\n                  t()\n          coef <- cbind(Row.Names = rownames(coef), coef)\n          rownames(coef) <- NULL\n          colnames(coef) <- c(\"coef\", \"val\")\n          coef <- as.data.frame(coef)\n          coef$val <- as.numeric(as.character(coef$val))\n          coef <- as.data.frame(coef)\n          coef <- mutate(coef, val = round(val, digits = 2))\n          coef$coef <- c(\"Underlayer intensity\", \"Overlayer intensity\", \"Sigma\", \n                         \"Interface position\", \"FWHM\", \"16%-84%\", \"FWTM\")\n          return(coef)\n  })\n  \n#   output$rangeSelect <- renderUI({\n#           #if (is.null(input$file1)) { return() }\n#           \n#           sliderInput(\"range\", \"Search Range\",\n#                       min = 0, max = 250, #MaxTime(),\n#                       value = c(50, 150), step = 0.5)\n#           \n#   })\n  \n# renders peak list slector\n  output$peakList <- renderUI({ \n          #if (is.null(input$file1)) { return() }\n          selectInput(\"peak\",\n                      \"Select peak\",\n                      peakList())\n          \n          \n  })\n  \n  \n\n}) # closes shinyServer\n",
    "created" : 1434666994049.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "972929811",
    "id" : "F03F26A9",
    "lastKnownWriteTime" : 1435113437,
    "path" : "~/Dropbox/UW/error_function_app/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}